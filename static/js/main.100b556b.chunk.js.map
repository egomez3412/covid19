{"version":3,"sources":["components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Header/Header-Style.js","components/Header/Header.jsx","pages/Globe/Globe.jsx","api/index.js","components/Cards/Cards.jsx","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","components/Footer/Footer.js","App.jsx","reportWebVitals.js","index.js","components/Cards/Cards.module.css"],"names":["module","exports","Container","styled","header","activeClassName","StyledNavLink","NavLink","attrs","Header","to","exact","S","Globe","useState","markers","setMarkers","a","fetch","response","json","countries","markers2","i","color","active","push","id","city","country","coordinates","countryInfo","lat","long","value","useEffect","fetchCountries","height","wid","options","cameraRotateSpeed","focusAnimationDuration","focusEasingFunction","markerTooltipRenderer","marker","url","fetchData","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","name","Cards","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Chart","setDailyData","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","Footer","href","xmlns","width","viewBox","d","getFullYear","App","state","FetchedData","setState","this","path","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.100b556b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3gIFT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl___dMVj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__18WAE\",\"image\":\"App_image__2TKNy\"};","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Container = styled.header`\n  display: flex;\n  width: 100vw;\n  min-width: 100%;\n  height: 100px;\n  justify-content: center;\n  align-items: center;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n`;\n\nexport const activeClassName = 'active';\n\nexport const StyledNavLink = styled(NavLink).attrs({\n  activeClassName: activeClassName,\n})`\n  &.${activeClassName} {\n    color: red;\n    opacity: 1;\n  }\n  opacity: .3;\n  color: black;\n  font-size: 42px;\n  opacity: .8;\n  text-align: center;\n  margin: 0 15px;\n  cursor: pointer;\n  text-decoration: none;\n`","import * as S from './Header-Style.js';\n\nconst Header = () => {\n  return (\n    <S.Container>\n      <S.StyledNavLink to=\"\" exact={true} activeClassName={S.activeClassName}> Globe </S.StyledNavLink>\n      <S.StyledNavLink to=\"/dashboard\" activeClassName={S.activeClassName}> Dashboard </S.StyledNavLink>\n    </S.Container>\n  )\n}\n\nexport default Header;\n","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport ReactGlobe from \"react-globe\";\n\nfunction Globe() {\n  const [markers, setMarkers] = useState([]);\n\n  const options = {\n    cameraRotateSpeed: 0.5,\n    focusAnimationDuration: 2000,\n    focusEasingFunction: [\"Linear\", \"None\"],\n    markerTooltipRenderer: (marker) => `${marker.city} (${marker.value})`,\n  };\n\n  async function fetchCountries() {\n    const response = await fetch(\n      \"https://corona.lmao.ninja/v2/countries?yesterday&sort\"\n    );\n    const countries = await response.json();\n    var markers2 = [];\n    for (var i = 0; i < 220; i++) {\n      let color;\n      if(countries[i].active > 1000000) {\n        color = \"#a50f15\";\n      }\n      else if (countries[i].active > 500000) {\n        color = \"#fb6a4a\";\n      }\n      else if (countries[i].active > 100000) {\n        color = \"#da8b6f\";\n      } \n      else if (countries[i].active > 50000) {\n        color = \"#fac5ad\";\n      }\n      else {\n        color = \"rgb(158, 223, 253)a\";\n      }\n      \n      markers2.push({\n        id: \"marker\" + i,\n        city: countries[i].country,\n        color: color,\n        coordinates: [\n          countries[i].countryInfo.lat,\n          countries[i].countryInfo.long,\n        ],\n        value: countries[i].active,\n      });\n    }\n    setMarkers(markers2);\n  }\n\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n\n  return (\n    <ReactGlobe\n      height=\"100vh\"\n      wid\n      markers={markers}\n      options={options}\n    />\n  );\n}\n\nexport default Globe;\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n//https://corona.lmao.ninja/v2/countries\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n        // const modifiedData = {\r\n        //     confirmed,\r\n        //     recovered,\r\n        //     deaths,\r\n        //     lastUpdate,\r\n        // }\r\n\r\n        return { confirmed, recovered, deaths, lastUpdate };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        // console.log(data);\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n        // console.log(response);\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport styles from './Cards.module.css';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if(!confirmed) {\r\n        return 'Loading...';\r\n    }\r\n    // console.log(props);\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            <CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            <CountUp start={0} end={recovered.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\" gutterBottom>\r\n                            <CountUp start={0} end={deaths.value} duration={2.5} separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React, {useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data : {confirmed, deaths, recovered}, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        // console.log(dailyData);\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n            ? (<Line\r\n            data={{\r\n                labels: dailyData.map(({ date }) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }],\r\n            }}\r\n            />) : null\r\n    );\r\n\r\n    const barChart = (\r\n        confirmed\r\n            ? (\r\n                <Bar \r\n                    data={{\r\n                        labels: ['Infected', 'Recovered', 'Deaths'],\r\n                        datasets: [{\r\n                            label: 'People',\r\n                            backgroundColor: ['rgba(0, 0, 255, 0.5)',\r\n                                              'rgba(0, 255, 0, 0.5)',\r\n                                              'rgba(255, 0, 0, 0.5)',\r\n                                            ],\r\n                            data: [confirmed.value, recovered.value, deaths.value],\r\n                        }]\r\n\r\n                    }}\r\n                    options={{\r\n                        legend: { display: false },\r\n                        title: { display: true, text: `Current state in ${country}`},\r\n                    }}\r\n                />\r\n            ) : null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, {useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport  { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ( { handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n    // console.log(fetchedCountries);\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = () => {\r\n    return(\r\n        <div className=\"main-footer\">\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {/* Column1 */}\r\n                    <div className=\"col\">\r\n                        <a href=\"https://github.com/egomez3412/COVID19-Dashboard-in-React\" className=\"hrefName\">\r\n                            <div className=\"textHref\">Check out the code here!</div>\r\n                        <br />\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n                <div className=\"row\">\r\n                    <p className=\"col-sm\">\r\n                        &copy;{new Date().getFullYear()} egomez3412 | All rights reverved | Terms of service | Privacy\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Footer;","// import StateView from \"./pages/StateView.jsx\";\nimport React from 'react';\n// import * as S from \"./App-Style.js\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport  Header  from \"./components/Header/Header.jsx\";\nimport Globe from './pages/Globe/Globe.jsx';\n\nimport { fetchData } from './api';\n// import coronaImage from './images/image.png';\nimport {Cards, Chart, CountryPicker, Footer} from './components';\nimport styles from './App.module.css';\n\nclass App extends React.Component {\n  state = {\n      data: {},\n      country: '',\n  }\n\n  async componentDidMount() {\n      const FetchedData = await fetchData();\n      this.setState({ data: FetchedData});\n  }\n\n  handleCountryChange = async (country) => {\n      const FetchedData = await fetchData(country);\n      this.setState({ data: FetchedData, country: country });\n      // console.log(FetchedData);\n      // console.log(country);\n      // fetch the data\n      // set the state\n  }\n\n  render() {\n      const { data, country } = this.state; \n      return (\n          <Router>\n              <Header />\n                  <Switch>\n                      <Route path=\"/dashboard\">\n                          <div className={styles.container}>\n                              {/* <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/> */}\n                              <Cards data={data}/>\n                              <CountryPicker handleCountryChange={this.handleCountryChange}/>\n                              <Chart data={data} country={country}/>\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                                <br />\n                          </div>\n                      </Route>\n                      <Route path=\"/\">\n                          <Globe />\n                      </Route>\n                  </Switch>\n                  \n                  <Footer />\n          </Router>\n      )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__27Lsa\",\"card\":\"Cards_card__IWeA5\",\"infected\":\"Cards_infected__79mM3\",\"recovered\":\"Cards_recovered__2k13Y\",\"deaths\":\"Cards_deaths__3p6S6\"};"],"sourceRoot":""}